version: '3.8'

services:
  f1-telemetry:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.collector
    container_name: f1-telemetry
    depends_on:
      - kafka
      - influxdb
      - postgres # Adicionada dependência do postgres
    networks:
      - telemetry_network
    ports:
      - "20777:20777/udp"  # Porta UDP para receber os dados do jogo
    environment:
      KAFKA_BROKER: "kafka:9092"
      INFLUXDB_URL: "http://influxdb:8086"
      INFLUXDB_TOKEN: "meu-token-secreto"
      INFLUXDB_ORG: "f1-org"
      INFLUXDB_BUCKET: "f1-bucket"
      # Adicione as variáveis de ambiente do PostgreSQL se o f1-telemetry precisar se conectar
      POSTGRES_HOST: "postgres"
      POSTGRES_DB: "f1db"
      POSTGRES_USER: "f1user"
      POSTGRES_PASSWORD: "f1password"
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - telemetry_network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - telemetry_network
    restart: unless-stopped

  influxdb:
    image: influxdb:2.7
    container_name: influxdb
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: admin123
      DOCKER_INFLUXDB_INIT_ORG: f1-org
      DOCKER_INFLUXDB_INIT_BUCKET: f1-bucket
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: meu-token-secreto
    networks:
      - telemetry_network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - influxdb
    networks:
      - telemetry_network
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: "f1db"
      POSTGRES_USER: "f1user"
      POSTGRES_PASSWORD: "f1password"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - telemetry_network
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadminpassword
    command: server /data --console-address ":9001"
    networks:
      - telemetry_network
    restart: unless-stopped

  minio-consumer:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.minio
    container_name: minio-consumer
    depends_on:
      - kafka
      - minio
    networks:
      - telemetry_network
    environment:
      KAFKA_BROKER: "kafka:9092"
      MINIO_ENDPOINT: "minio:9000"
      MINIO_ACCESS_KEY: "minioadmin"
      MINIO_SECRET_KEY: "minioadminpassword"
    restart: on-failure

  etl-job:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.etl
    depends_on:
      - minio
      - postgres
    networks:
      - telemetry_network
    environment:
      MINIO_ENDPOINT: "minio:9000"
      MINIO_ACCESS_KEY: "minioadmin"
      MINIO_SECRET_KEY: "minioadminpassword"
      PG_HOST: "postgres"
      PG_DB: "f1db"
      PG_USER: "f1user"
      PG_PASSWORD: "f1password"


networks:
  telemetry_network:
    driver: bridge

volumes:
  influxdb_data:
  grafana-data:
  minio_data:
  postgres_data:
